{"version":3,"sources":["config/schema.js","SuccessAlert.js","App.js","index.js"],"names":["schema","Yup","shape","name","required","email","dob","matches","emailCheckbox","oneOf","formOptions","resolver","yupResolver","mode","SuccessAlert","className","role","App","useForm","register","handleSubmit","reset","errors","formState","useState","successfull","setSuccessfull","onSubmit","data","json","JSON","stringify","axios","post","then","res","status","console","log","catch","err","req","id","htmlFor","type","message","emailConsent","onClick","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAGMA,EAASC,MAAaC,MAAM,CAChCC,KAAMF,MAAaG,SAAS,oBAC5BC,MAAOJ,MAAaG,SAAS,qBAAqBC,MAAM,oBACxDC,IAAKL,MAAaM,QAChB,mDACA,+DAEFC,cAAeP,MAAWQ,MAAM,EAAC,GAAO,8CAE7BC,EAAc,CAAEC,SAAUC,YAAYZ,GAASa,KAAM,Y,wBCFnDC,MARf,WACE,OACE,qBAAKC,UAAU,iCAAiCC,KAAK,QAArD,SACE,4FC4GSC,MA1Gf,WAAgB,IAAD,MACb,EAAqDC,YAAQR,GAArDS,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,MACxBC,EADR,EAAuCC,UAC/BD,OAER,EAAsCE,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KA+BA,OACE,qBAAKX,UAAU,oBAAf,SACE,sBAAKA,UAAU,WAAf,UACE,oBAAIA,UAAU,kCAAd,wBACA,qBAAKA,UAAU,qBAAf,SACE,uBAAMY,SAAUP,GAlCxB,SAAkBQ,GAChB,IAAMC,EAAOC,KAAKC,UAAUH,GAE5BI,IACGC,KAPO,+EAOGJ,GACVK,MACC,SAAAC,GACMA,EAAIC,OACNV,GAAe,GAEjBW,QAAQC,IAAIH,GACZd,OAIHkB,OAAM,SAAAC,GACDA,EAAIL,KACNE,QAAQC,IAAIE,EAAIL,KAChBT,GAAe,IACNc,EAAIC,KACbJ,QAAQC,IAAIE,EAAIC,KAChBf,GAAe,KAEfW,QAAQC,IAAI,kCACZZ,GAAe,UAUyBgB,GAAG,WAA3C,UACE,sBAAK3B,UAAU,aAAf,UACE,sBAAKA,UAAU,aAAf,UACE,uBAAOA,UAAU,aAAjB,kBACA,+CACE4B,QAAQ,OACRxC,KAAK,OACLyC,KAAK,QACDzB,EAAS,SAJf,IAKEJ,UAAS,uBAAkBO,EAAOnB,KAAO,aAAe,OAE1D,qBAAKY,UAAU,mBAAf,mBAAmCO,EAAOnB,YAA1C,aAAmC,EAAa0C,aAElD,sBAAK9B,UAAU,aAAf,UACE,0CACA,+CACE4B,QAAQ,QACRxC,KAAK,QACLyC,KAAK,QACDzB,EAAS,UAJf,IAKEJ,UAAS,uBAAkBO,EAAOjB,MAAQ,aAAe,OAE3D,qBAAKU,UAAU,mBAAf,mBAAmCO,EAAOjB,aAA1C,aAAmC,EAAcwC,gBAGrD,qBAAK9B,UAAU,WAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,kDACA,uBAAO4B,QAAQ,MAAMxC,KAAK,MAAMyC,KAAK,OAAO7B,UAAU,sBAG1D,sBAAKA,UAAU,wBAAf,UACE,+CACE4B,QAAQ,gBACRxC,KAAK,gBACLyC,KAAK,YACDzB,EAAS,kBAJf,IAKEJ,UAAS,2BAAsBO,EAAOwB,aAAe,aAAe,OAEtE,uBAAOH,QAAQ,eAAe5B,UAAU,mBAAxC,gDAGA,qBAAKA,UAAU,mBAAf,mBAAmCO,EAAOwB,oBAA1C,aAAmC,EAAqBD,aAE1D,sBAAK9B,UAAU,aAAf,UACE,wBACE6B,KAAK,SACLG,QAAS,WACP1B,IACAK,GAAe,IAEjBX,UAAU,yBANZ,mBASA,wBAAQ6B,KAAK,SAAS7B,UAAU,eAAeiC,SAAUvB,EAAzD,uBAIDA,EAAc,cAAC,EAAD,IAAmB,cCrG9CwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.603b1913.chunk.js","sourcesContent":["import { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst schema = Yup.object().shape({\r\n  name: Yup.string().required(\"Name is required\"),\r\n  email: Yup.string().required(\"Email is required\").email(\"Email is invalid\"),\r\n  dob: Yup.string().matches(\r\n    /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/,\r\n    \"Date of Birth must be a valid date in the format MM-DD-YYYY\"\r\n  ),\r\n  emailCheckbox: Yup.bool().oneOf([true], \"You must agree to be contacted via email\")\r\n});\r\nexport const formOptions = { resolver: yupResolver(schema), mode: \"onChange\" };\r\n","import React from \"react\";\r\n\r\nfunction SuccessAlert() {\r\n  return (\r\n    <div className=\"form-group alert alert-success\" role=\"alert\">\r\n      <p>Congratulations! Your Information was successfully sent.</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SuccessAlert;\r\n","import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { formOptions } from \"./config/schema\";\nimport axios from \"axios\";\n\nimport SuccessAlert from \"./SuccessAlert\";\n\nfunction App() {\n  const { register, handleSubmit, reset, formState } = useForm(formOptions);\n  const { errors } = formState;\n  const url = \"https://my-json-server.typicode.com/JustUtahCoders/interview-users-api/users\";\n  const [successfull, setSuccessfull] = useState(false);\n\n  function onSubmit(data) {\n    const json = JSON.stringify(data);\n\n    axios\n      .post(url, json)\n      .then(\n        res => {\n          if (res.status === 200 || 201) {\n            setSuccessfull(true);\n          }\n          console.log(res);\n          reset();\n        }\n        // console.log(res.status);\n      )\n      .catch(err => {\n        if (err.res) {\n          console.log(err.res);\n          setSuccessfull(false);\n        } else if (err.req) {\n          console.log(err.req);\n          setSuccessfull(false);\n        } else {\n          console.log(\"Something wrong within the app\");\n          setSuccessfull(false);\n        }\n      });\n  }\n\n  return (\n    <div className=\"container-sm mt-5\">\n      <div className=\"card p-5\">\n        <h5 className=\"card-header bg-transparent pl-1\">Contact Us</h5>\n        <div className=\"containercard-body\">\n          <form onSubmit={handleSubmit(onSubmit)} id=\"formData\">\n            <div className=\"form-group\">\n              <div className=\"form-group\">\n                <label className=\"form-label\">Name</label>\n                <input\n                  htmlFor=\"name\"\n                  name=\"name\"\n                  type=\"text\"\n                  {...register(\"name\")}\n                  className={`form-control ${errors.name ? \"is-invalid\" : \"\"}`}\n                />\n                <div className=\"invalid-feedback\">{errors.name?.message}</div>\n              </div>\n              <div className=\"form-group\">\n                <label>Email</label>\n                <input\n                  htmlFor=\"email\"\n                  name=\"email\"\n                  type=\"text\"\n                  {...register(\"email\")}\n                  className={`form-control ${errors.email ? \"is-invalid\" : \"\"}`}\n                />\n                <div className=\"invalid-feedback\">{errors.email?.message}</div>\n              </div>\n            </div>\n            <div className=\"form-row\">\n              <div className=\"form-group p-1\">\n                <label>Date of Birth</label>\n                <input htmlFor=\"dob\" name=\"dob\" type=\"date\" className=\"form-control\" />\n              </div>\n            </div>\n            <div className=\"form-group form-check\">\n              <input\n                htmlFor=\"emailCheckbox\"\n                name=\"emailCheckbox\"\n                type=\"checkbox\"\n                {...register(\"emailCheckbox\")}\n                className={`form-check-input ${errors.emailConsent ? \"is-invalid\" : \"\"}`}\n              />\n              <label htmlFor=\"emailConsent\" className=\"form-check-label\">\n                I agree to be contacted via email.\n              </label>\n              <div className=\"invalid-feedback\">{errors.emailConsent?.message}</div>\n            </div>\n            <div className=\"form-group\">\n              <button\n                type=\"button\"\n                onClick={() => {\n                  reset();\n                  setSuccessfull(false);\n                }}\n                className=\"btn btn-secondary mr-1\">\n                Clear\n              </button>\n              <button type=\"submit\" className=\"btn btn-dark\" disabled={successfull}>\n                Submit\n              </button>\n            </div>\n            {successfull ? <SuccessAlert /> : \"\"}\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}